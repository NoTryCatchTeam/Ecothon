@page "/login"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="login-form">

    <div class="container-fluid login-form-container">
        
    <EditForm Model="@Form" OnSubmit="@LoginAsync" FormName="LoginForm">
        <div>
            <label for="input_email" class="login-form-label">Email:</label>
            <input @bind="Form.Email" type="text" id="input_email" placeholder="Введите Email">
        </div>
        <div class="login-form-label">
            <label for="input_password">Пароль:</label>
            <input @bind="Form.Password" type="password" id="input_password" placeholder="Введите пароль">
        </div>
        <button class="btn login-forgot-password">Забыли пароль?</button>
        <button type="submit" class="btn login-btn btn-secondary">Submit</button>
    </EditForm>
    </div>
    
</div>

@code
{
    [SupplyParameterFromForm]
    public LoginForm Form { get; set; } = new ();

    [SupplyParameterFromQuery(Name = "redirect-uri")]
    public string RedirectUri { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // TODO Too late check
        if ((await AuthenticationStateProvider.GetAuthenticationStateAsync())?.User?.Identity?.IsAuthenticated == true)
        {
            NavigationManager.NavigateTo(RedirectUri ?? "/profile", true);
        }
    }

    private async Task LoginAsync()
    {
        var signInResult = await AuthService.SignInAsync(Form.Email, Form.Password);
        _ = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (signInResult)
        {
            NavigationManager.NavigateTo(RedirectUri, true);
        }
    }

    public class LoginForm
    {
        [Required]
        public string Email { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; }
    }
}